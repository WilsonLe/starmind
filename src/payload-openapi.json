{
  "openapi": "3.1.0",
  "info": {
    "title": "starmind",
    "version": "1.0.0",
    "description": "REST API with that acts as LLM Tools for AI Agents"
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "Find paginated Users",
        "description": "Find paginated Users",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/userssResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new User",
        "description": "Create a new User",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/usersRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Users",
        "description": "Update all Users matching the where query",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/usersRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Users",
        "description": "Delete all Users matching the where query",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersBulkResponse"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/usersRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/users/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersVersionsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the User version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersVersionResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the User version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/users/login": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "users"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/loginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/users/logout": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/confirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/NoUserErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/users/refresh-token": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/usersMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/users/unlock": {
      "post": {
        "summary": "Unlock account",
        "description": "Unlock account",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/unlockRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/confirmationResponse"
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/init": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/first-register": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify/{id}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "get": {
        "summary": "Find paginated Agents",
        "description": "Find paginated Agents",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentssResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Agent",
        "description": "Create a new Agent",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/agentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Agents",
        "description": "Update all Agents matching the where query",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/agentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Agents",
        "description": "Delete all Agents matching the where query",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsBulkResponse"
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/agentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/agents/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsVersionsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Agent version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsVersionResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Agent version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/agents/me": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "agents"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/agents/login": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "agents"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/loginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/agents/logout": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "agents"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/confirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/NoUserErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/agents/refresh-token": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "agents"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agentsMeResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        },
        "parameters": []
      }
    },
    "/agents/unlock": {
      "post": {
        "summary": "Unlock account",
        "description": "Unlock account",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/unlockRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/confirmationResponse"
          }
        }
      }
    },
    "/agents/forgot-password": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/init": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/first-register": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/reset-password": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/verify/{id}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "agents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media": {
      "get": {
        "summary": "Find paginated Media",
        "description": "Find paginated Media",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediasResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Media",
        "description": "Create a new Media",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mediaRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Media",
        "description": "Update all Media matching the where query",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mediaRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Media",
        "description": "Delete all Media matching the where query",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaBulkResponse"
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Media",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Media",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mediaRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Media",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/media/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaVersionsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Media version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaVersionResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Media version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/mediaUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/media/paste-url/{id?}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/file/{filename}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/media/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "summary": "Find paginated Notes",
        "description": "Find paginated Notes",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notessResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Note",
        "description": "Create a new Note",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/notesRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Notes",
        "description": "Update all Notes matching the where query",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/notesRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Notes",
        "description": "Delete all Notes matching the where query",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesBulkResponse"
          }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/notesRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/notes/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesVersionsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesVersionResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/notesUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/notes/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "notes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags": {
      "get": {
        "summary": "Find paginated Note Tags",
        "description": "Find paginated Note Tags",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagssResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Note Tag",
        "description": "Create a new Note Tag",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/note-tagsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Note Tags",
        "description": "Update all Note Tags matching the where query",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/note-tagsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Note Tags",
        "description": "Delete all Note Tags matching the where query",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsBulkResponse"
          }
        }
      }
    },
    "/note-tags/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/note-tagsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/note-tags/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsVersionsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note Tag version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsVersionResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Note Tag version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/note-tagsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/note-tags/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/note-tags/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "note-tags"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents": {
      "get": {
        "summary": "Find paginated Payload Locked Documents",
        "description": "Find paginated Payload Locked Documents",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentssResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Payload Locked Document",
        "description": "Create a new Payload Locked Document",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-locked-documentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Payload Locked Documents",
        "description": "Update all Payload Locked Documents matching the where query",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-locked-documentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Payload Locked Documents",
        "description": "Delete all Payload Locked Documents matching the where query",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsBulkResponse"
          }
        }
      }
    },
    "/payload-locked-documents/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Locked Document",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Locked Document",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-locked-documentsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Locked Document",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-locked-documentsUpsertConfirmationResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/payload-locked-documents/count": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/access/{id?}": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [
          {
            "name": "id?",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/versions": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/{id}/duplicate": {
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/versions/{id}": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-locked-documents/{id}/preview": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "payload-locked-documents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/payload-migrations": {
      "get": {
        "summary": "Find paginated Payload Migrations",
        "description": "Find paginated Payload Migrations",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationssResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new Payload Migration",
        "description": "Create a new Payload Migration",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-migrationsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsUpsertConfirmationResponse"
          }
        }
      },
      "patch": {
        "summary": "Update multiple Payload Migrations",
        "description": "Update all Payload Migrations matching the where query",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-migrationsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsBulkResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple Payload Migrations",
        "description": "Delete all Payload Migrations matching the where query",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsBulkResponse"
          }
        }
      }
    },
    "/payload-migrations/{id}": {
      "get": {
        "summary": "Get a single Payload Migration by its id",
        "description": "Get a single Payload Migration by its id",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Migration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort by field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "pass a where query to constrain returned documents (complex type, see documentation)",
            "style": "deepObject",
            "explode": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/where"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit the returned documents to a certain number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "get a specific page of documents",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates a Payload Migration",
        "description": "Updates a Payload Migration",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Migration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payload-migrationsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsUpsertConfirmationResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Deletes an existing Payload Migration",
        "description": "Deletes an existing Payload Migration",
        "tags": [
          "payload-migrations"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the Payload Migration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "number of levels to automatically populate relationships and uploads",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "retrieves document(s) in a specific locale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fallback-locale",
            "in": "query",
            "description": "specifies a fallback locale if no locale value exists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payload-migrationsUpsertConfirmationResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/access": {
      "get": {
        "summary": "custom operation",
        "description": "custom operation",
        "tags": [
          "auth",
          "custom"
        ],
        "security": [
          {
            "basicAuth": [],
            "cookieAuth": [],
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/accessResponse",
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": []
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "jwt"
      },
      "cookieAuth": {
        "in": "cookie",
        "type": "apiKey",
        "name": "payload-token"
      },
      "apiKeyAuth": {
        "in": "header",
        "type": "apiKey",
        "name": "Authorization"
      }
    },
    "schemas": {
      "error": {
        "title": "Error response message",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message"
              ]
            }
          }
        },
        "required": [
          "errors"
        ]
      },
      "confirmation": {
        "title": "Confirmation response message",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "where": {
        "title": "Where clause",
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "equals": {}
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "not_equals": {}
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "greater_than": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "greater_than_equal": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "less_than": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "less_than_equal": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "like": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "contains": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "in": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "not_in": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "near": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "properties": {
          "or": {},
          "and": {}
        },
        "example": {
          "or": [
            {
              "color": {
                "equals": "mint"
              }
            },
            {
              "and": [
                {
                  "color": {
                    "equals": "white"
                  }
                },
                {
                  "featured": {
                    "equals": false
                  }
                }
              ]
            }
          ]
        }
      },
      "whereCondition": {
        "title": "Where condition",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/where"
        }
      },
      "access": {
        "title": "Access",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "canAccessAdmin": {
            "type": "boolean"
          },
          "collections": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "create": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "permission": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "permission"
                  ]
                },
                "read": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "permission": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "permission"
                  ]
                },
                "update": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "permission": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "permission"
                  ]
                },
                "delete": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "permission": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "permission"
                  ]
                },
                "fields": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "create": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "permission": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "permission"
                        ]
                      },
                      "read": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "permission": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "permission"
                        ]
                      },
                      "update": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "permission": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "permission"
                        ]
                      }
                    },
                    "required": [
                      "create",
                      "read",
                      "update"
                    ]
                  }
                }
              },
              "required": [
                "create",
                "read",
                "update",
                "delete",
                "fields"
              ]
            }
          }
        },
        "required": [
          "canAccessAdmin",
          "collections"
        ]
      },
      "users": {
        "type": "object",
        "additionalProperties": false,
        "title": "User",
        "properties": {
          "id": {
            "type": "string"
          },
          "role": {
            "description": "The role of the user",
            "type": "string",
            "enum": [
              "admin"
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "_status": {
            "type": "string",
            "enum": [
              "draft",
              "published"
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string"
          },
          "resetPasswordToken": {
            "type": "string",
            "nullable": true
          },
          "resetPasswordExpiration": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "loginAttempts": {
            "type": "number",
            "nullable": true
          },
          "lockUntil": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "role",
          "updatedAt",
          "createdAt",
          "username"
        ]
      },
      "userss": {
        "type": "object",
        "title": "Users",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/users"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "usersUpsertConfirmation": {
        "type": "object",
        "title": "User upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/users"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "usersVersion": {
        "title": "User version",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "role": {
                "description": "The role of the user",
                "type": "string",
                "enum": [
                  "admin"
                ]
              },
              "_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "published"
                ],
                "nullable": true
              },
              "email": {
                "type": "string",
                "nullable": true
              },
              "username": {
                "type": "string"
              },
              "resetPasswordToken": {
                "type": "string",
                "nullable": true
              },
              "resetPasswordExpiration": {
                "type": "string",
                "nullable": true
              },
              "salt": {
                "type": "string",
                "nullable": true
              },
              "hash": {
                "type": "string",
                "nullable": true
              },
              "loginAttempts": {
                "type": "number",
                "nullable": true
              },
              "lockUntil": {
                "type": "string",
                "nullable": true
              },
              "password": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "role",
              "createdAt",
              "username"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "parent",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "usersVersions": {
        "type": "object",
        "title": "User versions",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/usersVersion"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "usersMe": {
        "title": "Me",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user": {
            "nullable": true,
            "$ref": "#/components/schemas/users"
          },
          "token": {
            "type": "string"
          },
          "exp": {
            "type": "number"
          }
        },
        "required": [
          "user"
        ]
      },
      "agents": {
        "type": "object",
        "additionalProperties": false,
        "title": "Agent",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "description": "The creator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedBy": {
            "description": "The updator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "_status": {
            "type": "string",
            "enum": [
              "draft",
              "published"
            ],
            "nullable": true
          },
          "enableAPIKey": {
            "type": "boolean",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "nullable": true
          },
          "apiKeyIndex": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdBy",
          "updatedBy",
          "updatedAt",
          "createdAt"
        ]
      },
      "agentss": {
        "type": "object",
        "title": "Agents",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/agents"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "agentsUpsertConfirmation": {
        "type": "object",
        "title": "Agent upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/agents"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "agentsVersion": {
        "title": "Agent version",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "createdBy": {
                "description": "The creator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "updatedBy": {
                "description": "The updator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "published"
                ],
                "nullable": true
              },
              "enableAPIKey": {
                "type": "boolean",
                "nullable": true
              },
              "apiKey": {
                "type": "string",
                "nullable": true
              },
              "apiKeyIndex": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "createdBy",
              "updatedBy",
              "createdAt"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "parent",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "agentsVersions": {
        "type": "object",
        "title": "Agent versions",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/agentsVersion"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "agentsMe": {
        "title": "Me",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user": {
            "nullable": true,
            "$ref": "#/components/schemas/agents"
          },
          "token": {
            "type": "string"
          },
          "exp": {
            "type": "number"
          }
        },
        "required": [
          "user"
        ]
      },
      "media": {
        "type": "object",
        "additionalProperties": false,
        "title": "Media",
        "properties": {
          "id": {
            "type": "string"
          },
          "alt": {
            "type": "string"
          },
          "createdBy": {
            "description": "The creator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedBy": {
            "description": "The updator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "_status": {
            "type": "string",
            "enum": [
              "draft",
              "published"
            ],
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "thumbnailURL": {
            "type": "string",
            "nullable": true
          },
          "filename": {
            "type": "string",
            "nullable": true
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "filesize": {
            "type": "number",
            "nullable": true
          },
          "width": {
            "type": "number",
            "nullable": true
          },
          "height": {
            "type": "number",
            "nullable": true
          },
          "focalX": {
            "type": "number",
            "nullable": true
          },
          "focalY": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "id",
          "alt",
          "createdBy",
          "updatedBy",
          "updatedAt",
          "createdAt"
        ]
      },
      "medias": {
        "type": "object",
        "title": "Media",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/media"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "mediaUpsertConfirmation": {
        "type": "object",
        "title": "Media upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/media"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "mediaVersion": {
        "title": "Media version",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "alt": {
                "type": "string"
              },
              "createdBy": {
                "description": "The creator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "updatedBy": {
                "description": "The updator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "published"
                ],
                "nullable": true
              },
              "url": {
                "type": "string",
                "nullable": true
              },
              "thumbnailURL": {
                "type": "string",
                "nullable": true
              },
              "filename": {
                "type": "string",
                "nullable": true
              },
              "mimeType": {
                "type": "string",
                "nullable": true
              },
              "filesize": {
                "type": "number",
                "nullable": true
              },
              "width": {
                "type": "number",
                "nullable": true
              },
              "height": {
                "type": "number",
                "nullable": true
              },
              "focalX": {
                "type": "number",
                "nullable": true
              },
              "focalY": {
                "type": "number",
                "nullable": true
              }
            },
            "required": [
              "alt",
              "createdBy",
              "updatedBy",
              "createdAt"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "parent",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "mediaVersions": {
        "type": "object",
        "title": "Media versions",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mediaVersion"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "notes": {
        "type": "object",
        "additionalProperties": false,
        "title": "Note",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "description": "The title of the note",
            "type": "string"
          },
          "content": {
            "description": "The content of the note",
            "type": "string"
          },
          "tags": {
            "description": "Tags associated with the note",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/note-tags"
                }
              ]
            },
            "nullable": true
          },
          "createdBy": {
            "description": "The creator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedBy": {
            "description": "The updator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "_status": {
            "type": "string",
            "enum": [
              "draft",
              "published"
            ],
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "createdBy",
          "updatedBy",
          "updatedAt",
          "createdAt"
        ]
      },
      "notess": {
        "type": "object",
        "title": "Notes",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notes"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "notesUpsertConfirmation": {
        "type": "object",
        "title": "Note upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/notes"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "notesVersion": {
        "title": "Note version",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "description": "The title of the note",
                "type": "string"
              },
              "content": {
                "description": "The content of the note",
                "type": "string"
              },
              "tags": {
                "description": "Tags associated with the note",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/note-tags"
                    }
                  ]
                },
                "nullable": true
              },
              "createdBy": {
                "description": "The creator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "updatedBy": {
                "description": "The updator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "published"
                ],
                "nullable": true
              }
            },
            "required": [
              "title",
              "content",
              "createdBy",
              "updatedBy",
              "createdAt"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "parent",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "notesVersions": {
        "type": "object",
        "title": "Note versions",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notesVersion"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "note-tags": {
        "type": "object",
        "additionalProperties": false,
        "title": "NoteTag",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "description": "Human-readble identifier for the tag",
            "type": "string"
          },
          "displayName": {
            "description": "The name of the tag",
            "type": "string"
          },
          "createdBy": {
            "description": "The creator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedBy": {
            "description": "The updator of the note, could be a user or an agent",
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "_status": {
            "type": "string",
            "enum": [
              "draft",
              "published"
            ],
            "nullable": true
          }
        },
        "required": [
          "id",
          "slug",
          "displayName",
          "createdBy",
          "updatedBy",
          "updatedAt",
          "createdAt"
        ]
      },
      "note-tagss": {
        "type": "object",
        "title": "Note Tags",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/note-tags"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "note-tagsUpsertConfirmation": {
        "type": "object",
        "title": "Note Tag upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/note-tags"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "note-tagsVersion": {
        "title": "NoteTag version",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "slug": {
                "description": "Human-readble identifier for the tag",
                "type": "string"
              },
              "displayName": {
                "description": "The name of the tag",
                "type": "string"
              },
              "createdBy": {
                "description": "The creator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "updatedBy": {
                "description": "The updator of the note, could be a user or an agent",
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "users"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/users"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "relationTo": {
                        "enum": [
                          "agents"
                        ]
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/agents"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "relationTo"
                    ]
                  }
                ]
              },
              "_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "published"
                ],
                "nullable": true
              }
            },
            "required": [
              "slug",
              "displayName",
              "createdBy",
              "updatedBy",
              "createdAt"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "parent",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "note-tagsVersions": {
        "type": "object",
        "title": "Note Tag versions",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/note-tagsVersion"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "payload-locked-documents": {
        "type": "object",
        "additionalProperties": false,
        "title": "PayloadLockedDocument",
        "properties": {
          "id": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ],
                "nullable": true
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ],
                "nullable": true
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "media"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/media"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ],
                "nullable": true
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "notes"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/notes"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ],
                "nullable": true
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "note-tags"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/note-tags"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ],
                "nullable": true
              }
            ]
          },
          "globalSlug": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "users"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/users"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "relationTo": {
                    "enum": [
                      "agents"
                    ]
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/agents"
                      }
                    ]
                  }
                },
                "required": [
                  "value",
                  "relationTo"
                ]
              }
            ]
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "user",
          "updatedAt",
          "createdAt"
        ]
      },
      "payload-locked-documentss": {
        "type": "object",
        "title": "Payload Locked Documents",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payload-locked-documents"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "payload-locked-documentsUpsertConfirmation": {
        "type": "object",
        "title": "Payload Locked Document upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/payload-locked-documents"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      },
      "payload-migrations": {
        "type": "object",
        "additionalProperties": false,
        "title": "PayloadMigration",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "batch": {
            "type": "number",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "updatedAt",
          "createdAt"
        ]
      },
      "payload-migrationss": {
        "type": "object",
        "title": "Payload Migrations",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payload-migrations"
            }
          },
          "totalDocs": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pagingCounter": {
            "type": "number"
          },
          "hasPrevPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "prevPage": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          }
        },
        "required": [
          "docs",
          "totalDocs",
          "limit",
          "totalPages",
          "page",
          "pagingCounter",
          "hasPrevPage",
          "hasNextPage"
        ]
      },
      "payload-migrationsUpsertConfirmation": {
        "type": "object",
        "title": "Payload Migration upsert confirmation",
        "properties": {
          "doc": {
            "$ref": "#/components/schemas/payload-migrations"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "doc",
          "message"
        ]
      }
    },
    "responses": {
      "InvalidRequestErrorResponse": {
        "description": "invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "description": "not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "confirmationResponse": {
        "description": "confirmed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/confirmation"
            }
          }
        }
      },
      "NoUserErrorResponse": {
        "description": "no user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "InvalidTokenErrorResponse": {
        "description": "invalid token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "accessResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/access"
            }
          }
        }
      },
      "usersResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/users"
            }
          }
        }
      },
      "userssResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userss"
            }
          }
        }
      },
      "usersUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/usersUpsertConfirmation"
            }
          }
        }
      },
      "usersVersionResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/usersVersion"
            }
          }
        }
      },
      "usersVersionsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/usersVersions"
            }
          }
        }
      },
      "usersBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/users"
                  }
                }
              }
            }
          }
        }
      },
      "usersMeResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/usersMe"
            }
          }
        }
      },
      "agentsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agents"
            }
          }
        }
      },
      "agentssResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agentss"
            }
          }
        }
      },
      "agentsUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agentsUpsertConfirmation"
            }
          }
        }
      },
      "agentsVersionResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agentsVersion"
            }
          }
        }
      },
      "agentsVersionsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agentsVersions"
            }
          }
        }
      },
      "agentsBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/agents"
                  }
                }
              }
            }
          }
        }
      },
      "agentsMeResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agentsMe"
            }
          }
        }
      },
      "mediaResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/media"
            }
          }
        }
      },
      "mediasResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/medias"
            }
          }
        }
      },
      "mediaUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mediaUpsertConfirmation"
            }
          }
        }
      },
      "mediaVersionResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mediaVersion"
            }
          }
        }
      },
      "mediaVersionsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mediaVersions"
            }
          }
        }
      },
      "mediaBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/media"
                  }
                }
              }
            }
          }
        }
      },
      "notesResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notes"
            }
          }
        }
      },
      "notessResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notess"
            }
          }
        }
      },
      "notesUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notesUpsertConfirmation"
            }
          }
        }
      },
      "notesVersionResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notesVersion"
            }
          }
        }
      },
      "notesVersionsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notesVersions"
            }
          }
        }
      },
      "notesBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notes"
                  }
                }
              }
            }
          }
        }
      },
      "note-tagsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tags"
            }
          }
        }
      },
      "note-tagssResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tagss"
            }
          }
        }
      },
      "note-tagsUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tagsUpsertConfirmation"
            }
          }
        }
      },
      "note-tagsVersionResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tagsVersion"
            }
          }
        }
      },
      "note-tagsVersionsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tagsVersions"
            }
          }
        }
      },
      "note-tagsBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/note-tags"
                  }
                }
              }
            }
          }
        }
      },
      "payload-locked-documentsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-locked-documents"
            }
          }
        }
      },
      "payload-locked-documentssResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-locked-documentss"
            }
          }
        }
      },
      "payload-locked-documentsUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-locked-documentsUpsertConfirmation"
            }
          }
        }
      },
      "payload-locked-documentsBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payload-locked-documents"
                  }
                }
              }
            }
          }
        }
      },
      "payload-migrationsResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-migrations"
            }
          }
        }
      },
      "payload-migrationssResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-migrationss"
            }
          }
        }
      },
      "payload-migrationsUpsertConfirmationResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-migrationsUpsertConfirmation"
            }
          }
        }
      },
      "payload-migrationsBulkResponse": {
        "description": "ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "docs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payload-migrations"
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "loginRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Login request",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        }
      },
      "unlockRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "email": {
                  "type": "string"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        }
      },
      "usersRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/users"
            }
          }
        }
      },
      "agentsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/agents"
            }
          }
        }
      },
      "mediaRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/media"
            }
          }
        }
      },
      "notesRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notes"
            }
          }
        }
      },
      "note-tagsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/note-tags"
            }
          }
        }
      },
      "payload-locked-documentsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-locked-documents"
            }
          }
        }
      },
      "payload-migrationsRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payload-migrations"
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Payload REST API documentation",
    "url": "https://payloadcms.com/docs/rest-api/overview"
  },
  "servers": [
    {
      "url": "https://starmind.wilsonle.me/api"
    }
  ]
}